params {
    // input files
    input_files {
        ref_sheet = "${projectDir}/input_files/ref_sheet.csv"
        sample_sheet = "${projectDir}/input_files/sample_sheet.csv"
        peak_sheet = "${projectDir}/input_files/peak_sheet.csv"
    }

    // parameters used in the transcript composition analysis
    transcript_composition_analysis {
        // the length of the transcript terminal
        terminal_length= 1000

        // the minimum length and maximum mismatch of a single-nucleus repeat to be defined as a poly-A tract
        min_length= 6
        max_mismatch= 0
    }

    cCREs {
        mouse = "${projectDir}/data/ccres/mm10-cCREs.bed"
        human = "${projectDir}/data/ccres/GRCh38-cCREs.bed"
    }


    read_peak_dist_threshold = 4000
    timecmd = "/usr/bin/time"
    // work_dir = "${projectDir}/work"
    output_dir = "${projectDir}/workflow_output"
    qos = "highmem"
    //     high  1-00:00:00     cpu=16,gres/gpu=4,mem=128G                                          
    //  highmem 21-00:00:00                  cpu=32,mem=2T                
    num_threads = 32
    large_num_threads = 32
    gb_mem = 2000
    large_gb_mem = 2000

}

// workDir = params.work_dir

process {
    executor = "slurm"
    cpus = params.num_threads
    memory = "${params.gb_mem}.GB"
    clusterOptions = "--partition=cbcb --qos=${params.qos} --account=cbcb --time=1-00:00:00 --exclude=cbcb13,cbcb17,cbcb01,cbcb09"

    // local can be used for very small jobs, like write log files
    withLabel: local {
        executor = "local"
        cpus = 1
        memory = "1.GB"
    }

    // These will be used for almost all jobs
    withLabel: cmd {
        conda = "${projectDir}/conda_envs/conda-cmd.yml"
        // conda = "/fs/cbcb-scratch/zaza/Projects/sc_read_concensus/nextflow/conda_envs/cache/CMD-99bea82d63d7400c70fec6adf260b1bd"
    }
    withLabel: r {
        conda = "${projectDir}/conda_envs/conda-r.yml"
        // conda = "/fs/cbcb-scratch/zaza/Projects/sc_read_concensus/nextflow/conda_envs/cache/R-d94cf5dd355a10bf4d909f3db84728ec"
        // clusterOptions = "--partition=cbcb --qos=highmem --account=cbcb --time=3-00:00:00"
        // memory = "${params.gb_mem}.GB"
        // cpus = params.large_num_threads

    }
    withLabel: py {
        conda = "${projectDir}/conda_envs/conda-py.yml"
        // clusterOptions = "--partition=cbcb --qos=highmem --account=cbcb --time=3-00:00:00"

        // conda = "/fs/cbcb-scratch/zaza/Projects/sc_read_concensus/nextflow/conda_envs/cache/conda-py-12ee60273836664a65e589f5f87afb83"
    }
}


conda {
    enabled = true
    useMamba = true
    cacheDir = "${projectDir}/conda_envs/cache"
    createTimeout = "240 min"
}

profiles {
    docker {
       docker.enabled = true
       process.container = null
    }
    conda {
        conda.enabled = true
        process {
            withName: "r_.*" {
                // conda = "${projectDir}/conda_envs/conda-r.yml"
                conda = "/fs/cbcb-scratch/zaza/Projects/sc_read_concensus/nextflow/conda_envs/cache/R-d94cf5dd355a10bf4d909f3db84728ec"
            }
            withName: "bash_.*" {
                conda = "${projectDir}/conda_envs/conda-cml.yml"
            }
            withName: "py_.*" {
                conda = "${projectDir}/conda_envs/conda-py.yml"
            }
        }
    }
}

trace {
  enabled = true
  overwrite = true
  file = 'pipeline_trace.txt'
  fields = 'task_id,name,tag,status,exit,realtime,%cpu,%mem,rss,peak_rss,realtime'
}
